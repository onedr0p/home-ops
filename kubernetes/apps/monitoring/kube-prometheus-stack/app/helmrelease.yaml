---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 45.1.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: heartbeat
            webhook_configs:
              - url: "https://heartbeat.uptimerobot.com/${SECRET_ALERTMANAGER_UPTIMEROBOT_HEARTBEAT_TOKEN}"
                send_resolved: true
          - name: "null" # quote
          - name: pushover
            pushover_configs:
              - url_title: View in Alert Manager
                token: "${SECRET_ALERTMANAGER_PUSHOVER_TOKEN}"
                user_key: "${SECRET_ALERTMANAGER_PUSHOVER_USER_KEY}"
                send_resolved: true
                html: true
                sound: gamelan
                priority: |-
                  {{ if eq .Status "firing" }}1{{ else }}0{{ end }}
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }}
                message: |-
                  {{- range .Alerts }}
                    {{- if ne .Labels.severity "" }}
                      <b>Severity:</b> <i>{{ .Labels.severity }}</i>
                    {{- else }}
                      <b>Severity:</b> <i>N/A</i>
                    {{- end }}
                    {{- if ne .Annotations.description "" }}
                      <b>Description:</b> <i>{{ .Annotations.description }}</i>
                    {{- else if ne .Annotations.summary "" }}
                      <b>Summary:</b> <i>{{ .Annotations.summary }}</i>
                    {{- else if ne .Annotations.message "" }}
                      <b>Message:</b> <i>{{ .Annotations.message }}</i>
                    {{- else }}
                      <b>Description:</b> <i>N/A</i>
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      <b>Details:</b>
                      {{- range .Labels.SortedPairs }}
                        â€¢ <b>{{ .Name }}:</b> <i>{{ .Value }}</i>
                      {{- end }}
                    {{- end }}
                  {{- end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 45s
          group_interval: 10m
          repeat_interval: 12h
          receiver: pushover
          routes:
            - receiver: heartbeat
              group_wait: 0s
              group_interval: 2m
              repeat_interval: 2m
              matchers:
                - alertname =~ "Watchdog"
            - receiver: "null" # quote
              matchers:
                - alertname =~ "InfoInhibitor"
            - receiver: pushover
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hajimari.io/appName: "Alert Manager"
          hajimari.io/icon: mdi:alert-decagram-outline
        hosts:
          - &host alert-manager.devbu.io
        tls:
          - hosts:
              - *host
      alertmanagerSpec:
        replicas: 3
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              resources:
                requests:
                  storage: 1Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels: ["node"]
            targetLabel: instance
    kube-state-metrics:
      metricLabelsAllowlist: ["persistentvolumeclaims=[*]"]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints: ["192.168.42.10", "192.168.42.11", "192.168.42.12"]
    kubeScheduler:
      enabled: true
      endpoints: ["192.168.42.10", "192.168.42.11", "192.168.42.12"]
    kubeProxy:
      enabled: false # Enable if not using eBPF
      # endpoints: ["192.168.42.10", "192.168.42.11", "192.168.42.12"]
    kubeEtcd:
      enabled: true
      endpoints: ["192.168.42.10", "192.168.42.11", "192.168.42.12"]
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/whitelist-source-range: |
            10.0.0.0/8,172.16.0.0/12,192.168.0.0/16
          hajimari.io/appName: Prometheus
          hajimari.io/icon: simple-icons:prometheus
        pathType: Prefix
        hosts:
          - &host prometheus.devbu.io
        tls:
          - hosts:
              - *host
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__ # must match with thanos value `.query.replicaLabel[0]`
        # Breaks any metric that has an existing "cluster" label on a metric
        # externalLabels:
        #   cluster: home # must match with thanos value `.ruler.clusterName`
        thanos:
          image: quay.io/thanos/thanos:v0.30.2
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 2d
        retentionSize: 6GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              resources:
                requests:
                  storage: 20Gi
        resources:
          requests:
            cpu: 150m
            memory: 2000Mi
          limits:
            memory: 7000Mi
        additionalScrapeConfigs:
          - job_name: pikvm
            scrape_interval: 1m
            scrape_timeout: 10s
            metrics_path: /api/export/prometheus/metrics
            basic_auth:
              username: admin
              password: 1nternalUseOnly
            honor_timestamps: true
            static_configs:
              - targets: ["pikvm.turbo.ac"]
