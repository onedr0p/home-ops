---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: falco
  namespace: falco-system
spec:
  interval: 15m
  chart:
    spec:
      chart: falco
      version: 2.0.5
      sourceRef:
        kind: HelmRepository
        name: falco-security-charts
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    # image:
    #   registry: public.ecr.aws
    driver:
      enabled: true
      kind: ebpf
    collectors:
      containerd:
        enabled: true
        socket: /var/run/k3s/containerd/containerd.sock
      docker:
        enabled: false
      crio:
        enabled: false
    falcosidekick:
      enabled: true
      # image:
      #   registry: public.ecr.aws
      config:
        alertmanager:
          hostport: http://kube-prometheus-stack-alertmanager.monitoring:9093
          endpoint: /api/v2/alerts
          minimumpriority: emergency
      webui:
        enabled: true
        # image:
        #   registry: public.ecr.aws
        ingress:
          enabled: true
          annotations:
            kubernetes.io/ingress.class: nginx
          hosts:
            - host: "falco.${SECRET_PUBLIC_DOMAIN}"
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - hosts:
                - "falco.${SECRET_PUBLIC_DOMAIN}"
        redis:
          storageClass: ceph-block
          storageSize: 5Gi
    # https://securityhub.dev/
    customRules:
      rules-admin-activities.yaml: |
        - rule: Detect su or sudo
          desc: detect sudo activities
          condition:
            spawned_process and proc.name in (sudo, su)
          output: >
            Detected sudo or su privilege escalation activity (user=%user.name command=%proc.cmdline)
          priority: WARNING
          tags: [process]
        - rule: Package Management Launched
          desc: detect package management launched
          condition: >
            spawned_process and user.name != "_apt" and package_mgmt_procs and not package_mgmt_ancestor_procs
          output: >
            Package management process launched in container (user=%user.name
            command=%proc.cmdline container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)
          priority: ERROR
          tags: [process]
      rules-ssh-connections.yaml: |-
        - rule: Inbound SSH Connection
          desc: Detect Inbound SSH Connection
          condition: >
            ((evt.type in (accept,listen) and evt.dir=<) or
              (evt.type in (recvfrom,recvmsg))) and ssh_port
          output: >
            Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)
          priority: WARNING
          tags: [network]
        - rule: Outbound SSH Connection
          desc: Detect Outbound SSH Connection
          condition: >
            ((evt.type = connect and evt.dir=<) or
              (evt.type in (sendto,sendmsg))) and ssh_port
          output: >
            Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)
          priority: WARNING
          tags: [network]
      rules-file-integrity.yaml: |-
        - rule: Detect New File
          desc: detect new file created
          condition: >
            evt.type = chmod or evt.type = fchmod
          output: >
            File below a known directory opened for writing (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: ERROR
          tags: [filesystem]
        - rule: Detect New Directory
          desc: detect new directory created
          condition: >
            mkdir
          output: >
            File below a known directory opened for writing (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: ERROR
          tags: [filesystem]
        - rule: Detect File Permission or Ownership Change
          desc: detect file permission/ownership change
          condition: >
            spawned_process and proc.name in (chmod, chown) and proc.args contains "/tmp/"
          output: >
            File below a known directory has permission or ownership change (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: WARNING
          tags: [filesystem]
        - rule: Detect Directory Change
          desc: detect directories change
          condition: >
            spawned_process and proc.name in (mkdir, rmdir, mvdir, mv)
          output: >
            Directory Change in Filesystem (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: WARNING
          tags: [filesystem]
        - rule: Kernel Module Modification
          desc: detect kernel module change
          condition: >
            spawned_process and proc.name in (insmod, modprobe)
          output: >
            Kernel Module Change (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)
          priority: WARNING
          tags: [process]
        - rule: Node Created in Filesystem
          desc: detect node created in filesystem
          condition: >
            spawned_process and proc.name = mknod
          output: >
            Node Creation in Filesystem (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)
          priority: WARNING
          tags: [filesystem]
        - rule: Listen on New Port
          desc: Detection a new port is listening
          condition:
            evt.type = listen
          output: >
            A new port is open to listen (port=%fd.sport ip=%fd.sip)
          priority: WARNING
          tags: [network]
      rules-nginx.yaml: |-
        - macro: nginx_consider_syscalls
          condition: (evt.num < 0)

        - macro: app_nginx
          condition: container and container.image contains "nginx"

        # Any outbound traffic raises a WARNING

        - rule: Unauthorized process opened an outbound connection (nginx)
          desc: A nginx process tried to open an outbound connection and is not whitelisted
          condition: outbound and evt.rawres >= 0 and app_nginx
          output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline
            connection=%fd.name)
          priority: WARNING


        # Restricting listening ports to selected set

        - list: nginx_allowed_inbound_ports_tcp
          items: [80, 443, 8080, 8443]

        - rule: Unexpected inbound tcp connection nginx
          desc: Detect inbound traffic to nginx using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (nginx_allowed_inbound_ports_tcp) and app_nginx
          output: Inbound network connection to nginx on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: nginx_allowed_processes
          items: ["nginx", "app-entrypoint.", "basename", "dirname", "grep", "nami", "node", "tini"]

        - rule: Unexpected spawned process nginx
          desc: Detect a process started in a nginx container outside of an expected set
          condition: spawned_process and not proc.name in (nginx_allowed_processes) and app_nginx
          output: Unexpected process spawned in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        - list: nginx_allowed_file_prefixes_readwrite
          items: ["/var/log/nginx", "/var/run"]
        # Remember to add your nginx cache path

        - rule: Unexpected file access readwrite for nginx
          desc: Detect an attempt to access a file readwrite other than below an expected list of directories
          condition: (open_write) and not fd.name pmatch (nginx_allowed_file_prefixes_readwrite) and app_nginx
          output: Unexpected file accessed readwrite for nginx (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting syscalls to selected set

        - list: nginx_allowed_syscalls
          items: [accept, bind, clone, connect, dup, listen, mkdir, open, recvfrom, recvmsg, sendto, setgid, setuid, socket, socketpair]

        - rule: Unexpected syscall nginx
          desc: Detect a syscall in a nginx container outside of an expected set
          condition: nginx_consider_syscalls and not evt.type in ("<unknown>", nginx_allowed_syscalls) and app_nginx
          output: Unexpected syscall in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
          priority: NOTICE
          warn_evttypes: False
