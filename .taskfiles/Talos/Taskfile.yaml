---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  VYOS_ADDR: vyos.turbo.ac
  VYOS_USER: devin
  MATCHBOX_DIR: /config/containers/matchbox/data
  MATCHBOX_GROUPS_DIR: "{{.MATCHBOX_DIR}}/groups"
  MATCHBOX_PROFILES_DIR: "{{.MATCHBOX_DIR}}/profiles"
  MATCHBOX_ASSETS_DIR: "{{.MATCHBOX_DIR}}/assets"
  # renovate: datasource=docker depName=ghcr.io/siderolabs/installer
  TALOS_VERSION: v1.6.4
  TALOS_SCHEMATIC_ID: d715f723f882b1e1e8063f1b89f237dcc0e3bd000f9f970243af59c8baae0100
  # renovate: datasource=docker depName=ghcr.io/siderolabs/kubelet
  KUBERNETES_VERSION: v1.29.1

tasks:

  bootstrap:
    desc: Bootstrap Talos
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        controller: Controller node to run command against (required)
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster... continue?
    cmds:
      - task: bootstrap-etcd
        vars: &vars
          cluster: "{{.cluster}}"
          controller: "{{.controller}}"
      - task: fetch-kubeconfig
        vars: *vars
      - task: bootstrap-apps
        vars: *vars
    requires:
      vars: ["cluster", "controller"]

  bootstrap-etcd:
    desc: Bootstrap Etcd
    cmd: until talosctl --context {{.cluster}} --nodes {{.controller}} bootstrap; do sleep 10; done
    requires:
      vars: ["cluster", "controller"]
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}

  bootstrap-apps:
    desc: Bootstrap core apps needed for Talos
    cmds:
      - until kubectl --context {{.cluster}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --kube-context {{.cluster}} --file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml apply
      - until kubectl --context {{.cluster}} wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    requires:
      vars: ["cluster"]
    preconditions:
      - kubectl config get-contexts {{.cluster}}
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml

  upgrade-talos:
    desc: Upgrade Talos on a node
    cmd: talosctl --context {{.cluster}} --nodes {{.node}} upgrade --image {{.image}} --preserve=true
    requires:
      vars: ["node", "image"]
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}
      - talosctl --nodes {{.node}} get machineconfig

  upgrade-k8s:
    desc: Upgrade k8s on a node
    cmd: talosctl --context {{.cluster}} --nodes {{.node}} upgrade-k8s --to {{.to}}
    requires:
      vars: ["node", "to"]
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}
      - talosctl --nodes {{.node}} get machineconfig

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmd: |
      talosctl --context {{.cluster}} kubeconfig --nodes {{.controller}} \
          --force --force-context-name {{.cluster}} {{.KUBERNETES_DIR}}/{{.cluster}}
    requires:
      vars: ["cluster"]
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}

  sync-matchbox:
    desc: Sync required Matchbox configuration to Vyos for PXE Boot
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/matchbox"
    cmds:
      - ssh -l {{.VYOS_USER}} {{.VYOS_ADDR}} "sudo mkdir -p {{.MATCHBOX_DIR}}/{groups,profiles,assets}"
      - ssh -l {{.VYOS_USER}} {{.VYOS_ADDR}} "sudo chown -R {{.VYOS_USER}}:users {{.MATCHBOX_DIR}}/{groups,profiles,assets}"
      - for: ["kernel-amd64", "initramfs-amd64.xz"]
        cmd: |
          curl -skL https://factory.talos.dev/image/{{.TALOS_SCHEMATIC_ID}}/{{.TALOS_VERSION}}/{{.ITEM}} | \
              curl -skT - -u "{{.VYOS_USER}}:" \
                  sftp://{{.VYOS_ADDR}}/{{.MATCHBOX_ASSETS_DIR}}/{{.ITEM}}
      - for: ["controller.partial.yaml", "worker.partial.yaml"]
        cmd: |
          sops -d assets/{{.ITEM | replace ".partial.yaml" ".partial.secret.sops.yaml"}} \
              | yq eval-all '. as $item ireduce ({}; . * $item )' assets/{{.ITEM}} - | \
                  envsubst | curl -skT - -u "{{.VYOS_USER}}:" \
                      sftp://{{.VYOS_ADDR}}/{{.MATCHBOX_ASSETS_DIR}}/{{.ITEM | replace ".partial.yaml" ".yaml"}}
      - find ./groups -type f -name "*.json" -exec curl -skT {} -u "{{.VYOS_USER}}:" sftp://{{.VYOS_ADDR}}/{{.MATCHBOX_GROUPS_DIR}}/ \;
      - find ./profiles -type f -name "*.json" -exec curl -skT {} -u "{{.VYOS_USER}}:" sftp://{{.VYOS_ADDR}}/{{.MATCHBOX_PROFILES_DIR}}/ \;
      - ssh -l {{.VYOS_USER}} {{.VYOS_ADDR}} -t /opt/vyatta/bin/vyatta-op-cmd-wrapper "restart container matchbox"
    env:
      TALOS_VERSION: "{{.TALOS_VERSION}}"
      TALOS_SCHEMATIC_ID: "{{.TALOS_SCHEMATIC_ID}}"
      KUBERNETES_VERSION: "{{.KUBERNETES_VERSION}}"
    requires:
      vars: ["cluster"]
