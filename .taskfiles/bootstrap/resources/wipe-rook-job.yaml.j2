---
apiVersion: batch/v1
kind: Job
metadata:
  name: &app wipe-rook-disks
  namespace: default
  labels:
    app.kubernetes.io/name: *app
spec:
  parallelism: {{ ENV.NODES }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *app
    spec:
      restartPolicy: Never
      containers:
        - name: main
          image: docker.io/library/alpine:latest
          command: ["/bin/sh", "-c"]
          args:
            - apk add --no-cache sgdisk util-linux util-linux-misc parted device-mapper;
              sgdisk --zap-all {{ ENV.DISK }};
              dd if=/dev/zero of={{ ENV.DISK }} bs=1M count=100 oflag=direct;
              blkdiscard {{ ENV.DISK }};
              partprobe {{ ENV.DISK }};
          securityContext:
            privileged: true
          resources: {}
      topologySpreadConstraints:
        - maxSkew: 1
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
---
apiVersion: batch/v1
kind: Job
metadata:
  name: &app wipe-rook-data
  namespace: default
  labels:
    app.kubernetes.io/name: *app
spec:
  parallelism: {{ ENV.NODES }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *app
    spec:
      restartPolicy: Never
      containers:
        - name: main
          image: docker.io/library/alpine:latest
          command: ["/bin/sh", "-c"]
          args: ["rm -rf /mnt/host_var/lib/rook"]
          volumeMounts:
            - mountPath: /mnt/host_var
              name: host-var
          securityContext:
            privileged: true
          resources: {}
      volumes:
        - name: host-var
          hostPath:
            path: /var
      topologySpreadConstraints:
        - maxSkew: 1
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
