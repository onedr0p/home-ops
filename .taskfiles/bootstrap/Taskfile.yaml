---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  BOOTSTRAP_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/bootstrap/resources'

tasks:

  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    cmds:
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which talosctl

  # NOTE: Expects all nodes are part of the Ceph cluster and have the same Ceph disk path
  rook:
    desc: Bootstrap Rook-Ceph [CLUSTER=main] [DISK=/dev/nvme0n1]
    cmds:
      - minijinja-cli {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook-job.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace default get job/wipe-rook &>/dev/null; do sleep 5; done
      - kubectl --namespace default wait job/wipe-rook --for=condition=complete --timeout=5m
      - kubectl --namespace default logs job/wipe-rook
      - kubectl --namespace default delete job wipe-rook
    env:
      DISK: '{{.DISK | default "/dev/nvme0n1"}}'
      NODES:
        sh: talosctl config info --output json | jq --raw-output '.nodes | length'
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wipe-rook-job.yaml.j2
      - which kubectl minijinja-cli talosctl

  apps:
    desc: Bootstrap Apps [CLUSTER=main]
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - helmfile --quiet --file {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml
      - which helmfile kubectl

  flux:
    desc: Bootstrap Flux [CLUSTER=main]
    cmds:
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/bootstrap/apps
      - for: { var: TEMPLATES }
        cmd: op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.ITEM}} | kubectl apply --server-side --filename -
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/flux/config
    vars:
      TEMPLATES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/apps/*.j2
    env:
      VAULT: '{{if eq .CLUSTER "main"}}kubernetes{{else}}{{.CLUSTER}}{{end}}' # ¯\_(ツ)_/¯
      FLUX_GITHUB_PUBLIC_KEYS:
        sh: ssh-keyscan github.com | grep -v '^#'
    requires:
      vars: [CLUSTER]
    preconditions:
      - op user get --me
      - which flux kubectl ls op ssh-keyscan

  # Ref: https://github.com/onedr0p/home-service
  matchbox:
    desc: Sync required Matchbox config to PXEBoot machine [CLUSTER=main]
    dotenv: ['{{.CLUSTER_DIR}}/cluster.env']
    cmds:
      - for: { var: ASSETS }
        cmd: sops exec-file --input-type yaml --output-type yaml {{.ITEM}} "minijinja-cli {} | curl -skT - -u "devin:" sftp://voyager.internal//var/opt/home-service/apps/matchbox/data/config/assets/{{base .ITEM | replace ".sops.yaml.j2" ".yaml"}}"
      - for: { var: GROUPS }
        cmd: minijinja-cli {{.ITEM}} | curl -skT - -u "devin:" sftp://voyager.internal//var/opt/home-service/apps/matchbox/data/config/groups/{{base .ITEM | replace ".json.j2" ".json"}}
      - for: { var: PROFILES }
        cmd: minijinja-cli {{.ITEM}} | curl -skT - -u "devin:" sftp://voyager.internal//var/opt/home-service/apps/matchbox/data/config/profiles/{{base .ITEM | replace ".json.j2" ".json"}}
      - ssh -l devin voyager.internal "cd /var/opt/home-service ; go-task restart-matchbox"
    vars:
      ASSETS:
        sh: ls {{.CLUSTER_DIR}}/talos/*.yaml.j2
      GROUPS:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/matchbox/groups/*.json.j2
      PROFILES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/matchbox/profiles/*.json.j2
    requires:
      vars: [CLUSTER]
    preconditions:
      - ping -c1 voyager.internal
      - which curl ls minijinja-cli sops ssh
