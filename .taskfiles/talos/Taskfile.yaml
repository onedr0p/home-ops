---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALOS_SCHEMATIC_FILE: '{{.TALOS_DIR}}/schematic.yaml'

tasks:

  apply-node:
    desc: Apply Talos config to a node [NODE=required] [MODE=auto]
    cmd: |
      minijinja-cli --define hostname={{.NODE}} {{.TALOS_DIR}}/controlplane.yaml.j2 \
        | op inject \
        | talosctl --nodes {{.NODE}} apply-config --mode {{.MODE}} --file /dev/stdin
    vars:
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars: [NODE]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which minijinja-cli talosctl op

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required] [MODE=powercycle]
    cmd: talosctl --nodes {{.NODE}} upgrade --image="{{.FACTORY_IMAGE}}" --reboot-mode={{.MODE}} --timeout=10m
    vars:
      MODE: '{{.MODE | default "powercycle"}}'
      FACTORY_IMAGE:
        sh: yq --exit-status '.machine.install.image' {{.TALOS_DIR}}/controlplane.yaml.j2
    requires:
      vars: [NODE]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - test -f {{.TALOS_DIR}}/controlplane.yaml.j2
      - which talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster
    cmd: talosctl --nodes {{.NODE}} upgrade-k8s --to {{.VERSION}}
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [VERSION]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [NODE=required] [MODE=powercycle]
    cmd: talosctl --nodes {{.NODE}} reboot --mode={{.MODE}}
    vars:
      MODE: '{{.MODE | default "powercycle"}}'
    requires:
      vars: [NODE]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  shutdown-cluster:
    desc: Shutdown Talos across the whole cluster
    prompt: Shutdown the Talos cluster ... continue?
    cmd: talosctl shutdown --nodes {{.NODES}} --force
    vars:
      NODES:
        sh: talosctl config info --output json | jq --exit-status --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  reset-node:
    desc: Reset Talos on a single node [NODE=required]
    prompt: Reset Talos node '{{.NODE}}' ... continue?
    cmd: talosctl reset --nodes {{.NODE}} --graceful=false
    requires:
      vars: [NODE]
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster ... continue?
    cmd: talosctl reset --nodes {{.NODES}} --graceful=false
    vars:
      NODES:
        sh: talosctl config info --output json | jq --exit-status --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  generate-kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.NODE}} --force --force-context-name main {{.ROOT_DIR}}
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl --nodes {{.NODE}} get machineconfig
      - which jq talosctl

  generate-schematic:
    desc: Generate the Schematic ID for a Talos cluster [VERSION=required]
    cmd: |
      SCHEMATIC=$(curl --silent -X POST --data-binary @{{.TALOS_SCHEMATIC_FILE}} https://factory.talos.dev/schematics | jq --raw-output '.id')
      echo "Talos Schematic: ${SCHEMATIC}"
      if [[ ! -f {{.TALOS_DIR}}/talos-{{.VERSION}}-${SCHEMATIC:0:8}.iso ]]; then
          curl -o {{.TALOS_DIR}}/talos-{{.VERSION}}-${SCHEMATIC:0:8}.iso \
            "https://factory.talos.dev/image/${SCHEMATIC}/{{.VERSION}}/metal-amd64.iso"
      fi
    requires:
      vars: [VERSION]
    preconditions:
      - test -f {{.TALOS_SCHEMATIC_FILE}}
      - which curl jq
