---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Pre-pull Images"

on:
  pull_request:
    branches: ["main"]
    paths:
      - kubernetes/main/apps/**
      - kubernetes/main/flux/**
      - kubernetes/shared/**

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  HOMEBREW_NO_ANALYTICS: "1"

jobs:
  default-images:
    name: Default Images
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.extract-images.outputs.images }}
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"
          ref: "${{ github.event.repository.default_branch }}"

      - name: Gather Images
        uses: docker://ghcr.io/allenporter/flux-local:v7.0.0@sha256:abf237e31d20de26f8a4b08e588cc927cb0a9f0ecf90d04bada00f393b919354
        with:
          args: >-
            get cluster
            --path /github/workspace/kubernetes/main/flux
            --enable-images
            --output yaml
            --output-file images.yaml

      - name: Filter Images
        shell: bash
        run: |
          yq -r '[.. | .images? | select(. != null)] | flatten | sort | unique | .[]' \
              images.yaml > images.txt

      - name: Extract Images
        id: extract-images
        shell: bash
        run: |
          images=$(jq --compact-output --raw-input --null-input '[inputs]' images.txt)
          echo "images=${images}" >> $GITHUB_OUTPUT

  pull-request-images:
    name: Pull Request Images
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.extract-images.outputs.images }}
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Gather Images
        uses: docker://ghcr.io/allenporter/flux-local:v7.0.0@sha256:abf237e31d20de26f8a4b08e588cc927cb0a9f0ecf90d04bada00f393b919354
        with:
          args: >-
            get cluster
            --path /github/workspace/kubernetes/main/flux
            --enable-images
            --output yaml
            --output-file images.yaml

      - name: Filter Images
        shell: bash
        run: |
          yq -r '[.. | .images? | select(. != null)] | flatten | sort | unique | .[]' \
              images.yaml > images.txt

      - name: Extract Images
        id: extract-images
        shell: bash
        run: |
          images=$(jq --compact-output --raw-input --null-input '[inputs]' images.txt)
          echo "images=${images}" >> $GITHUB_OUTPUT

  extract-images:
    name: Extract Images
    runs-on: ubuntu-latest
    needs: ["default-images", "pull-request-images"]
    outputs:
      matrix: ${{ steps.extract-images.outputs.images }}
    steps:
      - name: Compare Default and Pull Request Images
        id: extract-images
        shell: bash
        run: |
          images=$(jq --compact-output --null-input \
              --argjson f1 '${{ needs.default-images.outputs.images }}' \
              --argjson f2 '${{ needs.pull-request-images.outputs.images }}' \
              '$f2 - $f1' \
          )
          echo "images=${images}" >> $GITHUB_OUTPUT

  pre-pull-images:
    if: ${{ needs.extract-images.outputs.matrix != '[]' && fromJSON(needs.extract-images.outputs.matrix).length <= 8 }}
    name: Pre-pull Images
    runs-on: ["gha-runner-scale-set"]
    needs: ["extract-images"]
    strategy:
      matrix:
        images: ${{ fromJSON(needs.extract-images.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Setup Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Setup Workflow Tools
        shell: bash
        run: brew install siderolabs/tap/talosctl

      - name: Pre-pull Image
        run: talosctl -n $NODE_IP image pull ${{ matrix.images }}

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  pre-pull-images-success:
    if: ${{ always() }}
    needs: ["pre-pull-images"]
    name: Pre-pull Images Successful
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        name: Check matrix status
        run: exit 1
