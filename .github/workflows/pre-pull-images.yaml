---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Pre-pull Images"

on:
  pull_request:
    branches: ["main"]
    paths:
      - kubernetes/main/apps/**
      - kubernetes/main/flux/**
      - kubernetes/shared/**

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

# env:
#   HOMEBREW_NO_ANALYTICS: "1"
#   UV_SYSTEM_PYTHON: "1"

jobs:
  extract-images:
    name: Extract Images
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    outputs:
      matrix: ${{ steps.extract-images.outputs.images }}
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout Default Branch
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"
          ref: "${{ github.event.repository.default_branch }}"
          path: default

      - name: Checkout Pull Request Branch
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"
          path: pull

      # - name: Setup Homebrew
      #   uses: Homebrew/actions/setup-homebrew@master
      #   with:
      #     stable: true

      # - name: Setup Workflow Tools
      #   shell: bash
      #   run: brew install fluxcd/tap/flux helm jo kustomize uv yq

      # - name: Setup Python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: 3.12.x

      # - name: Install Python Dependencies
      #   shell: bash
      #   run: uv pip install flux-local

      - name: Setup Workflow Tools
        uses: jdx/mise-action@v2
        env:
          GITHUB_TOKEN: "${{ steps.app-token.outputs.token }}"
        with:
          mise_toml: |
            [tools]
            python = "3.12"
            "aqua:astral-sh/uv" = "latest"
            "aqua:fluxcd/flux2" = "latest"
            "aqua:helm/helm" = "latest"
            "aqua:kubernetes-sigs/kustomize" = "latest"
            "aqua:mikefarah/yq" = "latest"
            "pipx:flux-local" = "latest"

      - name: Gather Images in Default Branch
        shell: bash
        run: |
          flux-local get cluster \
              --path ${{ github.workspace }}/default/kubernetes/main/flux \
              --enable-images \
              --output yaml \
              --output-file default.yaml

      - name: Gather Images in Pull Request Branch
        shell: bash
        run: |
          flux-local get cluster \
              --path ${{ github.workspace }}/pull/kubernetes/main/flux \
              --enable-images \
              --output yaml \
              --output-file pull.yaml

      - name: Filter Default Branch Results
        shell: bash
        run: |
          yq -r '[.. | .images? | select(. != null)] | flatten | sort | unique | .[]' \
              default.yaml > default.txt

      - name: Filter Pull Request Branch Results
        shell: bash
        run: |
          yq -r '[.. | .images? | select(. != null)] | flatten | sort | unique | .[]' \
              pull.yaml > pull.txt

      - name: Compare Default and Pull Request Images
        id: extract-images
        shell: bash
        run: |
          images=$(jq --compact-output --raw-input --null-input '[inputs]' < <(grep -vf default.txt pull.txt))
          echo "images=${images}" >> $GITHUB_OUTPUT
          echo "${images}"
          echo "### Images" >> $GITHUB_STEP_SUMMARY
          echo "${images}" | jq --raw-output 'to_entries[] | "* \(.value)"' >> $GITHUB_STEP_SUMMARY

  pre-pull-images:
    if: ${{ needs.extract-images.outputs.matrix != '[]' }}
    name: Pre-pull Images
    runs-on: ["gha-runner-scale-set"]
    needs: ["extract-images"]
    strategy:
      matrix:
        images: ${{ fromJSON(needs.extract-images.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Setup Workflow Tools
        uses: jdx/mise-action@v2
        env:
          GITHUB_TOKEN: "${{ steps.app-token.outputs.token }}"
        with:
          mise_toml: |
            [tools]
            "aqua:siderolabs/talos" = "latest"

      # - name: Setup Homebrew
      #   uses: Homebrew/actions/setup-homebrew@master
      #   with:
      #     stable: true

      # - name: Setup Workflow Tools
      #   shell: bash
      #   run: brew install siderolabs/tap/talosctl

      - name: Pre-pull Image
        run: talosctl -n $NODE_IP image pull ${{ matrix.images }}

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  pre-pull-images-success:
    if: ${{ always() }}
    needs: ["pre-pull-images"]
    name: Pre-pull Images Successful
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        name: Check matrix status
        run: exit 1
